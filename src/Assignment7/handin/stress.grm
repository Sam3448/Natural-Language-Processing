import 'byte.grm' as bytelib;   # copy this file from grammars/byte.grm
Letter = bytelib.kAlpha;        # kAlpha is defined in byte.grm
Sigma = Letter | "'" | "^" | "$";           # alphabet also includes stress mark
Vowel = "a" | "e" | "i" | "o" | "u" | "A" | "E" | "I" | "O" | "U" | "^" | "$";
Consonant = Letter - Vowel;
Nucleus = Vowel+;

# YOU WILL FILL IN THE REST

# This matches the first appeared Nucleus
FirstNucleus = "[BOS]" Consonant*;

# This matches the nucleus that is not the first
NotFirstNucleus = (FirstNucleus | Consonant+ ) Nucleus Consonant+;

#Before and After match prefix and suffix of input, and whatever empty string in the middle we should change it to "'"
Before = (FirstNucleus | NotFirstNucleus);
After = Nucleus Consonant+ Nucleus;

export InputMatch = CDRewrite[("" : "'"), Before, After, Sigma*, 'ltr', 'obl'];
export OutputMatch = CDRewrite[("" : "'"), "[BOS]" Consonant*, Nucleus Consonant* "[EOS]", Sigma*, 'ltr', 'obl' ];

export Stress = Optimize[InputMatch @ OutputMatch];

export InvertStress = Invert[Stress];

Sigma2 = bytelib.kBytes;

export StressWords = CDRewrite[Stress, "[BOS]" | " ", "[EOS]" | " ", Sigma2*, 'ltr', 'obl'];

#Change in charge of changing y to ^ and Y to $. IChange to the opposite.
Change = ("y" : "^") | ("Y" : "$");
IChange = ("^" : "y") | ("$" : "Y");

#TY change all y and Y to ^ and $ that matches ending with EOS or consonant.
#ITY change those back by matching the same things.
export TY = CDRewrite[Change, "", "[EOS]" | Consonant, Sigma2*, 'ltr', 'obl'];
export ITY = CDRewrite[IChange, "", "[EOS]" | Consonant, Sigma2*, 'ltr', 'obl'];
export Stressy = Optimize[TY @ Stress @ ITY];
